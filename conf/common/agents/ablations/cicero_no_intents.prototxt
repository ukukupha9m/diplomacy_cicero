includes { path: "conf/common/agents/searchbot/qre_rol0_p30.prototxt"; mount: "bqre1p.base_searchbot_cfg" }
includes { path: "conf/common/agents/orders/20220305_allorderindependentrollout_bilateralprefix.prototxt"; mount: "bqre1p.base_searchbot_cfg.parlai_model_orders" }

bqre1p {
    base_searchbot_cfg {
      model_path: "models/rl_search_orders.ckpt"
      value_model_path: "models/rl_value_function.ckpt"
      rollout_model_path: "models/rl_search_orders.ckpt"

      dialogue {
        # forked from 20220516_dialogue_rolloutevery_replythresh_firstmessagethresh
        #  - model_pseudo_orders sampling greedy -> topk
        #  - reuse_pseudo_for_consecutive_messages: true
        #  - allow_multi_gpu: true
        #  - pseudo_orders_correspondence_threshold: -1
        #  - initial_message_prompts_path for 5m
        #  - binarize_sleep_times_in_5m_games: true
        #  - should_filter_grounding: true
        #  - limit_consecutive_outbound_messages: 2
        #  - rating_threshold_other: 0.05 -> 1.00
        #  - initiate_sleep_heuristic_every_phase: true -> false
        #  - use_initiate_sleep_heuristic_n_years: 2


        # Dialogue model which also has the ability to draw
        # Dialogue model which has seen draw messages and generic [REDACTED] tokens
        # Dialogue model which is conditioned on rollout pseudo orders for *every* phase
        model_dialogue {
          model_path: "models/ABLATIONS_no_pseudos_dialogue"
          overrides: {
              inference: "nucleus"
              topp: 0.9
              beam_size: 1
              set_player_rating: 5
          }
        }

        # sleepsix model
        # p(inf) threshold = 0.1
        model_sleep_classifier {
          model_path: "models/sleep_classifier"
          overrides: {
              set_player_rating: 5
          }
        }
        sleep_inf_threshold: 0.1
        sleep_inf_threshold_reply: 0.75


        # Imitation intent model trained to rollout through the next movement phase on every phase
        # Imitation intent model -- trained to see only generic [REDACTED] tokens instead of redaction ids
        # Has also been trained to see draw messages in the context
        # model_pseudo_orders {
        #     model_path: "models/imitation_intent"
        #     overrides: {
        #       inference: "topk"
        #       set_player_rating: 5
        #     }
        # }

        # Draw classifier
        model_draw_classifier {
            model_path: "models/draw_classifier"
            overrides: {
              set_player_rating: 5
            }
        }

        resample_dialogue_on_filter: 10

        rating_threshold_first_message: 0.05

        reuse_pseudo_for_consecutive_messages: true
        allow_multi_gpu: true


        initial_message_prompts_path: "models/markus_5m_prompts.json"
        initial_message_prompts_count: 2
        initial_message_prompt_spacing_seconds: 15

        binarize_sleep_times_in_5m_games: true

        should_filter_grounding: true
        limit_consecutive_outbound_messages: 2

        rating_threshold_other: 1.00

        initiate_sleep_heuristic_every_phase: false
        use_initiate_sleep_heuristic_n_years: 2
      }

      br_corr_bilateral_search {
        all_power_model_path: "models/rl_search_orders.ckpt"
        enable_for_pseudo_order: True
        enable_for_final_order: True
        use_all_power_for_p_joint: True
        br_regularize_lambda: 3e-3
        min_unnormalized_weight: 0.02
        max_unnormalized_weight: 10
      }

      plausible_orders_cfg {
        do_parlai_rescoring: true
        n_rescore: 30
        parlai_req_size: 30
        batch_size: 512
        allow_multi_gpu: 1
        exclude_n_holds: 3
      }
      bp_iters: 0  # Disabling.
      n_rollouts: 256
      loser_bp_value: 0  # Disabling.
      loser_bp_iter: 0  # Disabling.

      cfr_messages: true
      do_incremental_search: true
      use_truthful_pseudoorders: true
      skip_policy_evaluation_for_truthful_pseudoorders: true
      use_greedy_po_for_rollout: true
      half_precision: true

      bilateral_dialogue {
        strategy: BEST_POP
      }

      dialogue {
        rating_threshold_first_message: 1.0  # this means disabled
        grounding_last_playable_year: 1908  # For speedpress
      }
    }
    player_types {
      log_uniform {
        min_lambda: 1e-3
        max_lambda: 3e-1
      }
    }
    do_bayesian_updates: False  # webdip servicer currently doesn't support bayesian update
    num_player_types: 6
    agent_type: 2 # 1-based -> lambda=3e-3
    agent_type_is_public: false

    scale_lambdas_1901_spring: 5.0
    dynamic_lambda_stdev_espilon: 0.01
    dynamic_lambda_stdev_baseline: 0.05
    dynamic_lambda_stdev_num_samples: 100
}
